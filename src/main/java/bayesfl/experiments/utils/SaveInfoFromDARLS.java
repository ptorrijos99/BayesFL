package bayesfl.experiments.utils;

import bayesfl.data.BN_DataSet;
import bayesfl.experiments.LocalExperiment;
import bayesfl.model.BN;
import edu.cmu.tetrad.data.DataSet;
import edu.cmu.tetrad.graph.Dag;
import org.albacete.simd.utils.Utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static bayesfl.experiments.LocalExperiment.checkExistentFile;
import static bayesfl.experiments.LocalExperiment.launchExperiment;

public class SaveInfoFromDARLS {

    public static String PATH = "./";

    public static void main(String[] args) {
        /*int index = Integer.parseInt(args[0]);
        String paramsFileName = args[1];
        //int threads = Integer.parseInt(args[2]);

        // Read the parameters from args
        String[] parameters = null;
        try (BufferedReader br = new BufferedReader(new FileReader(paramsFileName))) {
            String line;
            for (int i = 0; i < index; i++)
                br.readLine();
            line = br.readLine();
            parameters = line.split(" ");
        }
        catch(Exception e){ System.out.println(e); }

        System.out.println("Number of hyperparams: " + parameters.length);
        int i=0;
        for (String string : parameters) {
            System.out.println("Param[" + i + "]: " + string);
            i++;
        }

        // Read the parameters from file
        String net = parameters[0];
        String bbdd = parameters[1];
        int nClients = Integer.parseInt(parameters[2]);
        int N = Integer.parseInt(parameters[3]);

        LocalExperiment.PATH = "/tmp/pablo.torrijos/";*/



        String net = "asia";
        String bbdd = "0";
        int nClients = 5;
        int N = 100;



        // Read the experiment in results/DARLS/net.bbdd_nClients_N_time.csv

        // Locate the experiment result file
        String resultFolder = PATH + "results/DARLS/";
        File folder = new File(resultFolder);
        String startFileName = (net + "." + bbdd + "_" + nClients + "_" + N);

        File[] files = folder.listFiles((dir, name) -> name.startsWith(startFileName));

        if (files == null || files.length == 0) {
            System.out.println("No result files found for the specified parameters.");
            return;
        }

        File resultFile = files[0]; // Assuming you want the first matching file
        System.out.println("Processing file: " + resultFile.getName());

        // Read the time from the file name
        String[] parts = resultFile.getName().split("_");
        double time = Double.parseDouble(parts[parts.length - 1].replace(".csv", ""));
        System.out.println("Time: " + time + " seconds");


        // Read the matrix from the file
        double[][] matrix = null;
        try (BufferedReader br = new BufferedReader(new FileReader(resultFile))) {
            List<double[]> rows = new ArrayList<>();
            String line;
            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                double[] row = Arrays.stream(values).mapToDouble(Double::parseDouble).toArray();
                rows.add(row);
            }
            matrix = rows.toArray(new double[0][]);
        } catch (Exception e) {
            System.out.println("Error reading result file: " + e.getMessage());
            return;
        }

        // We save the results
        String savePath = PATH + "results/Server/" + net + "." + bbdd + "_" + nClients + "_" + N + ".csv";
        if ((!checkExistentFile(savePath))) {
            // Load the original BN and data
            BN_DataSet data = new BN_DataSet(PATH + "res/networks/BBDD/" + net + "." + bbdd + ".csv", net + "." + bbdd);
            data.setOriginalBNPath(PATH + "res/networks/" + net + ".xbif");

            // Build the new BN generated by DARLS
            Dag newDAG = ExperimentUtils.readDagFromMatrix(matrix, data.getData().getVariables());
            BN bn = new BN(newDAG);

            // Save the results
            //     public void saveStats(String operation, String epoch, String path, int nClients, int id, Data data, int iteration, double time) {
            // String header = "bbdd,algorithm,maxEdges,fusionC,limitC,refinement,fusionS,limitS,nClients,id,iteration,instances,threads,bdeu,SMHD,fusSim,edges,tw,time(s)\n";

            bn.saveStats("DARLS," + N + ",,,,,", "0", PATH + "results/Server/", nClients, -1, data, 1, time);
        } else {
            System.out.println("\n EXISTENT EXPERIMENT: " + savePath + "\n");
        }
    }
}
